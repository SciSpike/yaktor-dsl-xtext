// automatically generated by Xtext
grammar io.yaktor.Domain with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/Xtext/io.yaktor.domain"
import "http://www.eclipse.org/Xtext/io.yaktor.domain.mongoNode"

DomainModel:
  
  ('import' domainModelImports+=DomainModelImport)*
  'domain-model' name=ID '{'
  (genOptions=GenOptions)?
  types+=NamedType*
  '}'
;
DomainModelImport :
  ref=[DomainModel|ID] ('as' alias=ID)?
;

NamedType:
  Association | AssociationRef | Entity | EnumType | Type
;


Association:
  'association' name=ID '{'
  start=AssociationEnd
  (isUnidirectional?='-->'|'<-->')
  end=AssociationEnd
  '}'
;


AssociationRef:
  'association-ref' ref=[Association|PossiblyQualifiedName]
;


AssociationEnd:
  references=[Entity|PossiblyQualifiedName]
  name=ID
  (cardinality=Cardinality)?
  isComposition?='composition'?
  unique?='unique'?
;


SimpleField:
  IdField | ShortIdField | StringField | DateField | IntegerField | EnumField | 
  NumericField | BooleanField | PriceField | AmountField | 
  CountField | EntityReferenceField| GeoLocationField;


Field:
  SimpleField | TypeField | AnyField;


ConstraintTypeField:
  SimpleField | AssociationEnd;
  
  
UniqueConstraint:
  'unique-constraint' fields+=[ConstraintTypeField|PossiblyQualifiedName]+;

IndexConstraint: 
  'composite-index' fields+=[ConstraintTypeField|PossiblyQualifiedName]+;
  
Entity:
  isAbstract?='abstract'? 'entity' name=ID ('extends' supertype=[Entity|PossiblyQualifiedName])?  metaData?='auditable'?'{'
  fields+=Field*
  uniqueConstraints+=UniqueConstraint*
  indexConstraints+=IndexConstraint*
  ('key' '(' keys+=[Field|ID] ')')?
  '}'
;


Type:
  isAbstract?='abstract'? 'type' name=ID ('extends' supertype=[Type|PossiblyQualifiedName])?  '{'
  fields+=Field*
  uniqueConstraints+=UniqueConstraint*
  indexConstraints+=IndexConstraint*
  ('key' '(' keys+=[Field|ID] ')')?
  '}'
;


EnumType:
  'enum' name=ID '{'
  values+=EnumValue+
  '}'
;


EnumValue:
  name=ID '=' value=STRING;

IdField:
	'Id' name=ID
  (cardinality=Cardinality)?
  (unique?='unique'? &
  indexed?='indexed'?)
;
ShortIdField:
	'ShortId' name=ID
  (cardinality=Cardinality)?
  ((pattern=STRING maxValue=INT?)? &
  unique?='unique'? &
  indexed?='indexed'?)
;

StringField:
  'String' name=ID 
  (cardinality=Cardinality)?
  (('=' defaultValue=STRING)? &
  ('pattern' pattern=STRING)? &
  unique?='unique'? &
  indexed?='indexed'? &
  obscured?='obscured'? &
  ('[' (minLength=INT)? '..' (maxLength=INT)? ']')?)
;


DateField:
  'Date' name=ID 
  ('=' defaultValue=STRING)?
  (cardinality=Cardinality)?
  (('[' (before=STRING)? '..' (after=STRING)? ']')? &
  unique?='unique'? &
  indexed?='indexed'? &
  (past?='past' | future?='future')?)
;

GeoLocationField: 
  'GeoLocation' name=ID
  (cardinality=SinglularCardinality)? 
;



IntegerField:
  'Integer' name=ID 
  (cardinality=Cardinality)?
  (('=' defaultValue=IntegerConst)? &
  unique?='unique'? &
  indexed?='indexed'? &
  ('[' (minValue=IntegerConst)? '..' (maxValue=IntegerConst)? ']')?)
;


NumericField:
  'Numeric' name=ID 
  (cardinality=Cardinality)?
  (('=' defaultValue=FloatingPointConst)? &
  unique?='unique'? &
  indexed?='indexed'? &
  ('[' (minValue=FloatingPointConst)? '..' (maxValue=FloatingPointConst)? ']')?)
;


BooleanField:
  'Boolean' name=ID 
  (cardinality=Cardinality)?
  (unique?='unique'? &
  indexed?='indexed'? &
  ('=' defaultValue=BooleanConst))?
;


PriceField:
  'Price' name=ID 
  (cardinality=Cardinality)?
  (indexed?='indexed'? &
  unique?='unique'?)
;


AmountField:
  'Amount' name=ID 
  (cardinality=Cardinality)?
  (indexed?='indexed'? &
  unique?='unique'?)
;


CountField:
  'Count' name=ID 
  (cardinality=Cardinality)?
  (indexed?='indexed'? &
  unique?='unique'?)
;


EnumField:
  'enum' isType=[EnumType|PossiblyQualifiedName] name=ID
  (cardinality=Cardinality)?
  ('jpa-enum-type' isJpaEnumType=JpaEnumType)? 
;


TypeField:
  isType=[Type|PossiblyQualifiedName] name=ID
  (cardinality=Cardinality)?
;

AnyField:
  'Any' name=ID
  (cardinality=Cardinality)?
;
EntityReferenceField: 
  'ref' refType=[Entity|PossiblyQualifiedName] name=ID
  (cardinality=Cardinality)?
;


enum Cardinality:
  Required = '!' | Optional = '?' | OneOrMore = '+' | Many = '*';
enum SinglularCardinality returns Cardinality:
  Required = '!' | Optional = '?';


FloatingPointConst:
    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
  

IntegerConst:
  '-'? INT;
  

BooleanConst:
  'true' | 'false';
  
  

GenOptions:
  JpaGenOptions | MongoNodeGenOptions
;


JpaGenOptions: 
  'jpa-gen-options' '{'
    project=ProjectOptions
    (persistence=PersistenceOptions)?
    (generationInclusion=GenerationInclusion)?
    useAspects?='use-aspects'?
    metaData?='auditable'?
    ('extensions' '{'
      (tableOptions+=JpaTableOptions)*
    '}')?
  '}'
;


ProjectOptions:
  'project-options' '{'
  (('project-name' name=ID) &
  ('root-package' rootPackage=QualifiedName) &
  ('domain-subpackage' domainSubpackage=QualifiedName)? &
  ('controller-subpackage' controllerSubpackage=QualifiedName)? &
  jsonSupport?='json-support'?)
  '}'
;
  

GenerationInclusion:
  'generation-inclusion' '{'
  (
        ('types'      types=InclusionType) &
        ('controller' controller=InclusionType)? &
        ('resources'  resources=InclusionType)? &
        ('properties' properties=InclusionType)? &
        ('views'      views=InclusionType)? &
        ('web-xml'    webxml=InclusionType)? &
        ('pom'        pom=InclusionType)? &
        ('styles'     styles=InclusionType)? &
        ('classes'    classes=InclusionType)? &
        ('layouts'    layouts=InclusionType)? &
        ('web-mvc'    webmvc=InclusionType)? &
        ('tags'       tags=InclusionType)?
        )
  '}'
;

Ttl:
  'ttl'
  field=[DateField|PossiblyQualifiedName]
  expireAfterSeconds=INT
;

MongoNodeGenOptions: 
  {MongoNodeGenOptions}
  'node-mongo-options' '{'
    useLogger?='use-logger'?
    ('model-path' modelPath=STRING)?
    ('test-path'  testPath=STRING)?
    (generateTest?='gen-test')?
    ('extensions' '{'
      (tableOptions+=MongoNodeTableOptions)*
    '}')?
  '}'
;

JpaTableOptions:
  type=[Entity|ID] "{"
    (singleTableRoot?='single-table-root')?
  "}"
;

MongoNodeTableOptions: 
  type=[Entity|ID] '{'
    (ttl=Ttl)?
    (singleTableRoot?='single-table-root')?
  '}'
;



enum InclusionType:
  Overwrite = 'OVERWRITE' | Protected = 'PROTECTED' | None = 'NONE';
  

QualifiedName:
  ID ('.' ID)*;
PossiblyQualifiedName:
  ID ('.' ID)*;
  

PersistenceOptions:
  'persistence-options' '{'
  (('database' dbType=DbType) &
  ('provider' dbProvider=DbProvider) &
  ('user' userName=ID)? &
  ('password' password=(ID | STRING))? &
  ('url' url=STRING)? &
  ('db-name' dbName=ID)?)
  '}'
;


enum DbType:
  MySql = 'MYSQL' | Oracle = 'ORACLE' |
  DatabaseDotCom = 'DATABASE_DOT_COM' | Db2400 = 'DB2_400' | Db2ExpressC = 'DB2_EXPRESS_C' | DerbyClient = 'DERBY_CLIENT' | DerbyEmbedded = 'DERBY_EMBEDDED' |
    Firebird = 'FIREBIRD' | GoogleAppEngine = 'GOOGLE_APP_ENGINE' | H2InMemory = 'H2_IN_MEMORY' | HypersonicInMemory = 'HYPERSONIC_IN_MEMORY' | 
    HypersonicPersistent = 'HYPERSONIC_PERSISTENT' | MsSql = 'MSSQL' | Postgres = 'POSTGRES' | Sybase = 'SYBASE'
  ;


enum DbProvider:
    Hibernate = 'HIBERNATE' | DataNucleus = 'DATANUCLEUS' |
    EclipseLink = 'ECLIPSELINK' | OpenJPA = 'OPENJPA'
    ;


enum JpaEnumType:
    Ordinal = 'ORDINAL' | String = 'STRING' | None = 'NONE'
    ;


