conversation Test {
  message Test from Test.All {
  }
  message TestRef from Test.Ref {
    a
    i {
      a
    }
  }
  agent Test : Test {
    sends
      started: Test
      something

    initially receives ^start:Test -> working > started
    {
      done {
      }
      working {
        TestDepend.finished -> done
        toggle -> suspended
      }
      suspended {
        toggle -> working
      }
    }
  }
  agent TestDepend concerns Test {
    sends finished

    initially receives Test.started -> thinking
    {
      broken {
      }
      done {
      }
      decision thinking {
        done -> done > finished
        error -> broken > finished
      }
    }
  }
  message TerseMessage {
    String value
  }
  infinite agent Terse : TerseMessage {
    > opened
      closed
    ~ -> open {
      open {
        close -> closed > closed
        consider -> considering
      }
      closed {
        open -> open > opened
        consider -> considering
      }
      decision considering {
        ok -> open > opened
        nok -> closed > closed
      }
    }
  }
  message VerboseMessage {
    String value
  }
  infinite agent Verbose concerns VerboseMessage {
    sends opened
    sends closed
    initially becomes open {
      open {
        close becomes closed sends closed
        consider becomes considering
      }
      closed {
        open becomes open sends opened
        consider becomes considering
      }
      decision considering {
        ok becomes open sends opened
        nok becomes closed sends closed
      }
    }
  }

  infinite agent TerseInitiallyReceives : TerseMessage {
    > opened
      closed
    ~ Test.started -> open {
      open {
        close -> closed > closed
      }
      closed {
        open -> open > opened
      }
    }
  }

  message B from Test.B {}
  message C from Test.C {
    id
    a
    c
    ShortId y "(\\w)*"
    String p pattern "(\\w)*"
  }

  view /test.vw over /test
  resource /test for Test.Test offers ( create read update delete find) interchanges ( json form )

  resource /terse : Test.TerseMessage anonymous (read find) authenticated (update post) authorized (create delete) <=> (json)
  view /terse : /terse
  resource /verbose for Test.VerboseMessage offers anonymous (read find) authenticated (update post) authorized (create delete) interchanges (json)
  view /verbose over /verbose
  resource /tir : Test.TerseMessage anonymous (read find) authenticated (update) authorized (create delete) <=> (json) @ API
  view /tir : /tir

  view /c : /c
  resource /c : Test.C ( create read update delete ) <=> ( json form )
  view /b over /b
  resource /b for Test.B offers ( create read update delete ) interchanges ( json form )

  view /TestRef over /TestRef
  resource /TestRef for Test.TestRef offers ( create read update delete ) interchanges ( json form )
}
