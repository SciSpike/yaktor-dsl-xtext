/*
 * generated by Xtext
 */
package io.yaktor.generator

import com.google.inject.Inject
import io.yaktor.conversation.Conversation
import io.yaktor.generator.dot.DotGenerator
import io.yaktor.generator.js.JsDto
import io.yaktor.generator.js.JsGenerator
import io.yaktor.generator.js.JsGgpGenerator
import io.yaktor.generator.js.JsSimulator
import io.yaktor.generator.js.RestRoutingGenerator
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import io.yaktor.generator.doc.ConversationDocGenerator
import io.yaktor.generator.doc.ResourcesDocGenerator
import java.util.HashSet

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class ConversationGenerator implements IGenerator {
  @Inject DotGenerator dotGen
  @Inject JsGenerator jsGen
  @Inject JsGgpGenerator jsGgpGen
  @Inject RestRoutingGenerator restJsGen
  @Inject JsDto jsDto
  @Inject JsSimulator jsSim
  @Inject ConversationDocGenerator docGen
  @Inject ResourcesDocGenerator resGen

  override void doGenerate(Resource resource, IFileSystemAccess fsa) {
    var c = resource.contents.get(0) as Conversation
    c.doGenerateDotFSMs(fsa)
    c.doGenerateJSs(fsa);
    c.doGenerateJSs(fsa);
    c.doGenerateDocumentation(fsa);
    fsa.generateFile('''../simulator/«c.name».js''',jsSim.genSimulator(c))
    for(type:c.definedTypes){
      fsa.generateFile('''types/«c.name».«type.name».js''', ConversationOutputConfigurationProvider.GEN, jsDto.genType(type))
    }
    fsa.generateFile("types/index.js", ConversationOutputConfigurationProvider.GEN, index)
  }
  
  def getIndex(){
    '''
      var fs = require('fs')
      var path = require('path')
      var fileReg = /^(.*)\..+$/
      fs.readdirSync(__dirname).forEach(function (file) {
        var filePath = path.join(__dirname, file)
        if (__filename !== filePath) {
          module.exports[file.replace(fileReg, '$1')] = require(filePath)
        }
      })
    '''
  }

  def doGenerateDotFSMs(Conversation c, IFileSystemAccess fsa) {
    fsa.generateFile("dot/fsm/" + c.name + ".dot", dotGen.genConversationDiagram(c))
    fsa.generateFile("dot/fsm/" + c.name + ".html", dotGen.getConversationAsHtml(c))
  }
  
  def doGenerateDocumentation(Conversation c, IFileSystemAccess fsa) {
  	fsa.generateFile("conversation/" + c.name + "/reference.adoc", ConversationOutputConfigurationProvider.DOC, docGen.genConversationDoc(c))
  	for (r : c.restServices) {
	  	fsa.generateFile("conversation/" + c.name + "/rest" + r.url + "_" + r.refType.name + ".adoc", ConversationOutputConfigurationProvider.DOC, resGen.genResourcesDoc(r,c))
  	}
  }

  def doGenerateJSs(Conversation c, IFileSystemAccess fsa) {
    fsa.generateFile("js/" + c.name + "/index.gen.js", ConversationOutputConfigurationProvider.GEN, jsGen.genRoot(c,ConversationOutputConfigurationProvider.GEN_CONFIG.outputDirectory+"/js"))
    fsa.generateFile("js/" + c.name + "/index.js", ConversationOutputConfigurationProvider.GEN_ONCE,
      jsGgpGen.genUserFile("index"))
    fsa.generateFile("js/" + c.name + "/index.def.js", ConversationOutputConfigurationProvider.GEN,
      jsGgpGen.genRoot("index"))
    restJsGen.generate(fsa,c)
    fsa.generateFile('security/index.js',ConversationOutputConfigurationProvider.GEN,index)
    for (a : c.agents) {
      fsa.generateFile('''security/«c.name».«a.name».js''', ConversationOutputConfigurationProvider.GEN, jsGen.genSecurity(a))
      
      
      fsa.generateFile('''simulator/«c.name»/«a.name».js''',ConversationOutputConfigurationProvider.GEN_ROOT,jsSim.genSimulator(a))
      
      
      for(type:a.definedTypes){
        fsa.generateFile('''types/«c.name».«a.name».«type.name».js''', ConversationOutputConfigurationProvider.GEN, jsDto.genType(type))
      }
      
      
      fsa.generateFile("js/" + c.name + "/" + a.name + "/index.gen.js",
        ConversationOutputConfigurationProvider.GEN, jsGgpGen.genAgentIndex(a))
      fsa.generateFile("js/" + c.name + "/" + a.name + "/index.js", ConversationOutputConfigurationProvider.GEN_ONCE,
        jsGgpGen.genUserFile("index"))
      fsa.generateFile("js/" + c.name + "/" + a.name + "/index.def.js", ConversationOutputConfigurationProvider.GEN,
        jsGgpGen.genRoot("index"))  
        
        
      fsa.generateFile("js/" + c.name + "/" + a.name + "/lib/states.gen.js",
        ConversationOutputConfigurationProvider.GEN, jsGen.genStates(a))
      fsa.generateFile("js/" + c.name + "/" + a.name + "/lib/states.js",
        ConversationOutputConfigurationProvider.GEN_ONCE, jsGgpGen.genUserFile("states"))
      fsa.generateFile("js/" + c.name + "/" + a.name + "/lib/states.def.js",
        ConversationOutputConfigurationProvider.GEN, jsGgpGen.genStates(a))
        
        
      fsa.generateFile("api/"+c.name + "/" + a.name + ".js", ConversationOutputConfigurationProvider.PUBLIC,
        jsGen.genAllInOne(a))
    }
    fsa.generateFile('''«c.name »/views.js''', ConversationOutputConfigurationProvider.PUBLIC,
      jsGen.genViewJs(c))
    val servers = new HashSet<String>
    c.restServices.forEach[r| servers.add(r.server)]
    for(server:servers){
      fsa.generateFile('''swagger_api/«server?:"DEFAULT"»/«c.name ».json''', ConversationOutputConfigurationProvider.PUBLIC,
        jsGen.genSwagger(c,server))
    }
      
    fsa.generateFile('''ejs/«c.name»/test.ejs''', ConversationOutputConfigurationProvider.GEN, jsGen.genHtmlTest(c));
    
    fsa.generateFile('''routes/DEFAULT/___«c.name»_test.js''', ConversationOutputConfigurationProvider.GEN_ROOT, '''
    module.exports = function (ctx) {
      ctx.app.get('/«c.name»/test.html', function (req, res, next) { res.render('«c.name»/test.ejs', { sId: req.sessionID }) })
    }
    ''');
  }
}
