package io.yaktor.generator.js

import io.yaktor.access.RestAccess
import io.yaktor.access.RestService
import io.yaktor.conversation.Conversation
import io.yaktor.generator.ConversationOutputConfigurationProvider
import io.yaktor.types.Projection
import org.eclipse.xtext.generator.IFileSystemAccess

import static extension io.yaktor.generator.util.CommentExtractorExtensions.*


import static extension io.yaktor.generator.js.JsTypesExtensions.*
import java.util.HashMap
import java.util.TreeSet

class RestRoutingGenerator {
  def static endpointsPath(Conversation c, RestService rs) {
    c.endpointsPath(rs.server)
  }

  def static endpointsPath(Conversation c, String server) {
    '''js/«c.name»/rest/endpoints«IF server != null»_«server»«ENDIF»'''
  }
  def static routePath(Conversation c, String server) {
    '''../routes«server?:""»/rest-«c.name».js'''
  }
  def generate(IFileSystemAccess fsa, Conversation c) {
    var routeMap = new HashMap<String,StringBuilder>
    var servers = new TreeSet<String>
    var counter = 0;
    for (rs : c.restServices.sortWith[rs1, rs2|rs1.url.compareTo(rs2.url)]) {
      if (rs.server != null){servers.add(rs.server);}
      var thisEndpointsPath = c.endpointsPath(rs)
      var route =  '''
        /**
         * Methods for «rs.url»
         */
        var rs_«rs.refType.name»_«counter» = require(require('path').resolve("«ConversationOutputConfigurationProvider.GEN_ONCE_CONFIG.outputDirectory»/«thisEndpointsPath»«rs.url»/«rs.refType.name».js"));
        «c.genMethodRoutes(rs, counter)»
      '''
      routeMap.put(rs.server?:"",(routeMap.get(rs.server?:"")?:new StringBuilder).append(route));
      counter = counter + 1;
      fsa.generateFile(thisEndpointsPath + "/" + rs.url + "/" + rs.refType.name + ".def.js",
        ConversationOutputConfigurationProvider.GEN, c.genRestServices(rs))
      fsa.generateFile(thisEndpointsPath + "/" + rs.url + "/" + rs.refType.name + ".js",
        ConversationOutputConfigurationProvider.GEN_ONCE, '''
          (function(){
            "use strict";
            var util = require('util');
            var my = module.exports = require("./«rs.refType.name».def.js");
          })();
        ''')

      fsa.generateFile('''actions«IF rs.server != null»_«rs.server»«ENDIF»/«rs.url.replaceAll("/","#")».js''', ConversationOutputConfigurationProvider.GEN_ROOT, '''
          «FOR ag : rs.accessGroups»
            «FOR m : ag.accessMethods»
              «var regex = rs.actionPath(m)»
              module.exports['«regex»']=module.exports['«regex»']||{};
              module.exports['«regex»']['«m.method.toLowerCase»']='«ag.accessRequirement»';
            «ENDFOR»
          «ENDFOR»
      ''');
    }
    var serverCounter = 0;
    servers.add("")
    for(server:servers.sort){
      var initializersPath = '''config/initializers«IF server.length>0»_«server»«ENDIF»'''
      var path = '''routes«IF server.length>0»_«server»«ENDIF»''';
      fsa.generateFile('''servers/«IF server.length>0»«server»«ELSE»DEFAULT«ENDIF».js''', ConversationOutputConfigurationProvider.GEN_ONCE_ROOT, '''
          var path = require('path');
          module.exports={
            name:"«IF server.length>0»«server»«ELSE»DEFAULT«ENDIF»",
            port:process.env.«IF server.length>0»«server.toUpperCase»_«ENDIF»PORT||((process.env.PORT||3000)«IF serverCounter > 0» +«serverCounter»«ENDIF»),
            routesPath:path.resolve("«path»"),
            initializersPath:path.resolve("«initializersPath»"),
            actionsPath:path.resolve("actions«IF server.length>0»_«server»«ENDIF»")
          }
      ''');
      serverCounter = serverCounter + 100;
      fsa.generateFile('''«path»/rest-«c.name».js''', ConversationOutputConfigurationProvider.GEN_ROOT,'''
          /*
           * This file was generated by the Yaktor code generators
           */
          module.exports = function(ctx) {
            «routeMap.get(server)?.toString»
          };
      ''');
      fsa.generateFile('''«initializersPath»/10_routes.js''', ConversationOutputConfigurationProvider.GEN_ONCE_ROOT,'''
          /*
           * This file was generated by the Yaktor code generators
           *
           */
          var fs = require('fs');
          var path = require('path');
          var logger = require(path.resolve("yaktor/logger"));
          logger.silly(__filename);
          module.exports = function() {
            var app = this;
            var routes = app.get("routesPath");
            fs.existsSync(routes) && fs.readdirSync(routes).forEach(function(file) {
              var item = path.join(routes, file);
              require(item)(app);
            });
          };
      ''');
      fsa.generateFile('''actions«IF server.length>0»_«server»«ENDIF»/index.js''', ConversationOutputConfigurationProvider.GEN_ROOT, '''
        var fs = require('fs');
        var path = require('path');
        var fileReg = /(.*)\..+/;
        fs.readdirSync(__dirname).forEach(function(file) {
          var filePath = path.join(__dirname,file);
          if(__filename != filePath){
            var mod = require(filePath);
            for(var model in mod ){
              module.exports[model] = mod[model];
            }
          }
        });
      ''')
    }
  }


  def static repeat(String string, int times) {
    var count = 0;
    var result = new StringBuilder
    while ((count = count + 1) <= times) {
      result.append(string);
    }
    return result.toString()
  }

  def genRestServices(Conversation c, RestService rs) {
    '''
        «IF rs.refType.entity != null»var «rs.refType.entity.name» = require("mongoose").model("«rs.refType.entity.name»");«ENDIF»
        var yaktor = require("yaktor");
        var converter = require('yaktor/services/conversionService');
        var Response = require('yaktor/services/Response');
        var async = require('async');
        «rs.comments»
        «FOR method : rs.methods.sort»
          «method.restService(rs)»
        «ENDFOR»
      '''
  }

  def restService(RestAccess method, RestService rs) {
    '''
      /*
       * «method.crud»
       * «method.method.toUpperCase» «rs.path(method)»
       * for «rs.refType.name»
       * Optionally module.exports.«method.crud»Middleware = [function...]||function;
       */
    ''' + switch method {
      case method == RestAccess.POST: '''
        module.exports.«method.crud» = function(body, req, res) {
          «IF rs.refType.entity != null»
            async.waterfall([
              async.apply(converter.from,'«rs.refType.fullName»', body),
              async.apply(«rs.refType.repositoryServiceName».create.bind(«rs.refType.repositoryServiceName»)),
              async.apply(converter.to,'«rs.refType.fullName»') //
            ],Response.create(req, res, "«FOR type : rs.supportedDocumentTypes.sort SEPARATOR ','»«type.literal»«ENDFOR»"));
          «ELSE»
            res.end();
          «ENDIF»
        };
      '''
      case method == RestAccess.GET: '''
        module.exports.«method.crud» = function(id, req, res) {
          «IF rs.refType.entity != null»
            async.waterfall([
              async.apply(«rs.refType.repositoryServiceName».findOne.bind(«rs.refType.repositoryServiceName»),{_id:id}),
              async.apply(converter.to,'«rs.refType.fullName»') //
            ],Response.read(req, res, "«FOR type : rs.supportedDocumentTypes.sort SEPARATOR ','»«type.literal»«ENDFOR»"));
          «ELSE»
            res.end();
          «ENDIF»
        };
      '''
      case method == RestAccess.PUT: '''
        module.exports.«method.crud» = function(id, body,req, res) {
          «IF rs.refType.entity != null»
            async.waterfall([
              async.apply(converter.from,'«rs.refType.fullName»', body),
              function(domain,cb){
                «rs.refType.repositoryServiceName».findOneAndUpdate({_id:id}, domain,{new:true},cb);
              },
              async.apply(converter.to,'«rs.refType.fullName»') //
            ],Response.update(req, res, "«FOR type : rs.supportedDocumentTypes.sort SEPARATOR ','»«type.literal»«ENDFOR»"));
          «ELSE»
            res.end();
          «ENDIF»
        };
      '''
      case method == RestAccess.DELETE: '''
        module.exports.«method.crud» = function(id, req, res) {
          «IF rs.refType.entity != null»
            «rs.refType.repositoryServiceName».findOneAndRemove({_id:id},Response.delete(req, res,"«FOR type : rs.supportedDocumentTypes.sort SEPARATOR ','»«type.literal»«ENDFOR»"));
          «ELSE»
            res.end();
          «ENDIF»
        };
      '''
      case method == RestAccess.FIND: '''
        module.exports.«method.crud» = function(query, req, res) {
          «IF rs.refType.entity != null»
            async.waterfall([
              async.apply(converter.toQuery,'«rs.refType.fullName»', query),
              function(pQ,cb){
                var page = parseInt(req.param("page"))||1;
                var pageSize = parseInt(req.param("pageSize"))||10;
                «rs.refType.repositoryServiceName».find(pQ).paginate(page, pageSize, cb);
              },
              function(domains, total,cb){
                converter.to('«rs.refType.fullName»', domains, function(err, dtos) {
                  cb(err,dtos,total);
                });
              } //
            ],Response.find(req, res, "«FOR type : rs.supportedDocumentTypes.sort SEPARATOR ','»«type.literal»«ENDFOR»"));
          «ELSE»
            res.end();
          «ENDIF»
        };
      '''
    }
  }

  def getRepositoryServiceName(Projection p) {
    if (p.entity != null) {
      p.entity.name
    } else {
      p.name
    }
  }


  def genMethodRoutes(Conversation c, RestService rs, int counter) {
    '''
      «FOR method : rs.methods.sort SEPARATOR '\n'»
        «method.methodRoute(rs, counter)»
      «ENDFOR»
    '''
  }

  def methodRoute(RestAccess method, RestService rs, int counter) {
    '''
    /*
     * «method.crud» a «rs.refType.name»
     */
    ctx.app.«method.method.toLowerCase»('«rs.path(method)»', rs_«rs.refType.name»_«counter».«method.crud»Middleware||[], function(req,res,next){rs_«rs.
      refType.name»_«counter».«method.crud»''' + switch method {
      case method == RestAccess.POST: '(req.body,req,res,next)});'
      case method == RestAccess.GET: "(req.params['id'],req,res,next)});"
      case method == RestAccess.PUT: "(req.params['id'],req.body,req,res,next)});"
      case method == RestAccess.DELETE: "(req.params['id'],req,res,next)});"
      case method == RestAccess.FIND: '(req.query,req,res,next)});'
    }
  }

  def path(RestService rs, RestAccess method) {
    switch method {
      case method == RestAccess.POST:
        rs.url
      case method == RestAccess.GET: '''«rs.url»/:id'''
      case method == RestAccess.PUT: '''«rs.url»/:id'''
      case method == RestAccess.DELETE: '''«rs.url»/:id'''
      case method == RestAccess.FIND:
        rs.url
    }
  }
  def actionPath(RestService rs, RestAccess method) {
    var regexUrl = "^"+rs.url
    switch method {
      case method == RestAccess.POST:
        regexUrl+"$"
      case method == RestAccess.GET: '''«regexUrl»/[^/]+$'''
      case method == RestAccess.PUT: '''«regexUrl»/[^/]+$'''
      case method == RestAccess.DELETE: '''«regexUrl»/[^/]+$'''
      case method == RestAccess.FIND:
        regexUrl+"$"
    }
  }

  def crud(RestAccess method) {
    switch method {
      case method == RestAccess.POST: 'create'
      case method == RestAccess.GET: 'read'
      case method == RestAccess.PUT: 'update'
      case method == RestAccess.DELETE: 'delete'
      case method == RestAccess.FIND: 'find'
    }
  }

  def method(RestAccess method) {
    switch method {
      case method == RestAccess.POST: 'post'
      case method == RestAccess.GET: 'get'
      case method == RestAccess.PUT: 'put'
      case method == RestAccess.DELETE: 'delete'
      case method == RestAccess.FIND: 'get'
    }
  }

}
